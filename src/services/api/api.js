import axios from 'axios'


export default {
  /** getArtworks() returns a list of all the artworks in DB  */
  async getArtworks() {
    return axios
      .get("getartwork.php")
      .then((response) => {
        console.log('api.js');
        console.log(response);
        return response.data;
      });
  },

  /** getRandomQuestion() returns a random question among all questions. */
  async getRandomQuestion() {
    console.log('getrandomquestion');
    return axios.get("getquestion.php").then((response) => {
      return response.data;
    });
  },

  /**getQuestions() returns a list of all questions in DB */
  async getQuestions() {
    console.log('getAllQuestions');
    return axios.get("questionmanager.php").then((response) => {
      return response.data;
    });
  },

  /** saveExpoImage(imgUrl, curatorName, expoName) save the imgUrl on server under the name 'YYYmmDDhhMMss_randomInt.jpg',
   * then sends a request to store it in DB, with fileName = the name defined just before, curatorName and expoName as defined in parameter and Type = 1 (ie expo from web game, not physical one). it returns the id of the expo as generated by DB. */
  async saveExpoImage(imgURL, curatorName, expoName) {
    return axios.post("saveExpoImage.php", {
      image: imgURL,
      curatorName: curatorName,
      expoName: expoName,
      typeId: 1,
      pwd: 'Twin!Peaks!S3'
    })

  },

  /**
   * @param {*} photoType If type is null, all types are returned.
   * @param {*} currentPage used to manually define a pagination
   * @param {*} limit  used to mannually define a pagination
   * @returns returns a list of all expo photos of type=photoType (1=numeric, 2=physical). cuurrentPage and limit parameters are used to create manually a pagination.
   */
  async getGalleryPhotos(photoType,currentPage,limit) {
    return axios.get("getgalleryphotos.php", { params: {typeId : photoType,page: currentPage,limit: limit} }).then((response) => {
      console.log('api getgalleryphotos ok');
      console.log(response.data);
      return response.data;
    });
  },

  /**
   * 
   * @param {*} id 
   * @returns photo object from DB which corresponds to given id.
   */
  async getGalleryPhoto(id) {
    return axios.get("getgalleryphotos.php?id=" + id).then((response) => {
      return response.data;
    });
  },

  /**
   * 
   * @param {*} photoType  if photoTpe=0, returns ids of photos from all photoTypes.
   * @returns a list of all ids of expo photos which corresponds to given photoType.
   *
   */
  async getGalleryPhotoIdRange(photoType) {
    if (photoType==0) {
      return axios.get("getgalleryphotos.php", { params: { function: 'idrange' } }).then((response) => {
        return response.data;
      });

    }
    else {
      return axios.get("getgalleryphotos.php", { params: { function: 'idrange',typeId : photoType } }).then((response) => {
        return response.data;
      });
    }
  },


  /**
   * Used to awkwardly create manually create a pagination
   */
  async getNextGalleryPhotos(limit, page) {
    return axios.get("getgalleryphotos.php", { params: { limit: limit, page: page } }).then((response) => {
      return response.data;
    });
  },
   /**
   * Used to awkwardly create manually create a pagination
   */
  async getPreviousGalleryPhoto(id) {
    return axios.get("getgalleryphotos.php", { params: { function: 'prev', id: id } }).then((response) => {
      return response.data;
    });
  },
   /**
   * Used to awkwardly create manually create a pagination
   */
  async getNexGalleryPhoto(id) {
    return axios.get("getgalleryphotos.php", { params: { function: 'next', id: id } }).then((response) => {
      return response.data;
    });
  },

}